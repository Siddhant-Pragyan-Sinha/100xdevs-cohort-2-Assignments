

/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require("express");
  const bodyParser = require("body-parser");
  const fs = require("fs");
  const path = require("path");
  const http = require('http');
  const { v4: uuidv4 } = require('uuid'); 
  
  const port = 4000;


  const app = express();

  //This is the Middleware to parse the json request body 
  app.use(bodyParser.json());

  //Arrays to store todo Item 
  let todos = [];

  //Below is the helper function to save the todos in a file
  function saveTodoasaFile() {
    const filepath = path.join(__dirname, 'todos.json');
    fs.writeFileSync(filepath, JSON.stringify(todos), 'utf-8');
  }


  //The below is the post request to save the todo item inside a file
  app.post("/todos", (req, res) => {
    const {title , description,isCompleted} = req.body;
    const newtodo = {
      id : todos.length + 1,
      title, 
      description,
      isCompleted
    };
    todos.push(newtodo);
    saveTodoasaFile();
    res.status(201).json({id : newtodo.id});
  })

  app.get("/todos", (req,res) => {
    res.status(200).json(todos);
  });

 function loaddatafromfile()
 {
  const filepath = path.join(__dirname, 'todos.json');
  if(fs.existsSync(filepath))
  {
    const fileData = fs.readFileSync(filepath, 'utf-8');
    todos = JSON.parse(fileData);
  }
 }

 loaddatafromfile()

  app.get("/todos/:id", (req,res) => {
    var id = req.params.id;
    const index = todos.find((item) => item.id === parseInt(id));
    if(index)
    {
      res.status(200).json(index);
    }
    else 
    {
      res.status(404).send("Something went wrong");
    }
  });

  app.delete("/todos/:id", (req,res) => {
    var id = req.params.id;
    const index = todos.findIndex((item) => item.id === parseInt(id));
    if(index !== -1)
    {
     const deletedTodo =  todos.splice(index, 1);
     saveTodoasaFile();
      res.status(200).json(deletedTodo);
    }
    else 
    {
      res.status(404).send("Something went wrong while deleting the data from the json file");
    }
  });

  app.delete("/todos", (req,res) => {
    todos = [];
    saveTodoasaFile();
    res.status(200).send("All Todo's items has been deleted from the json file");
  })

  app.put("/todos/:id", (req,res) => {
    var id = req.params.id;
    const {title, description, isCompleted} = req.body;
    const index = todos.findIndex((item) => item.id === parseInt(id));
    if(index !== -1)
    {
      todos[index] = {
        id : parseInt(id),
        title : title,
        description : description,
        isCompleted : isCompleted
      };
      saveTodoasaFile();

      res.status(200).json(todos[index]);
    }else 
    {
      res.status(404).send("An Error Occured while updating");
    }
  })
  app.listen(port, (req, res) => {
    console.log(`Server is running on the port no. ${port}`);
  })

  module.exports = app;