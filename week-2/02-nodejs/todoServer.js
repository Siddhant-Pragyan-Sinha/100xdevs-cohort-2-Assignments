/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  const port = 3000;
  app.use(bodyParser.json());


  const todos = [
    {
      id:1,
      title : "Going to the Gym vroms",
      description : "I have to go to gym at 7 pm in the night"
    },
    {
      id :2,
      title : "Going to the class vroms",
      description : "I have to go to gym at 7 am in the morning."
    },
    {
      id:3,
      title : "Going to the moive vroms",
      description : "I have to go for a moive at 7 pm in the nght"
    },
    {
      id:4,
      title : "Going for a car ride vroms",
      description : "I have to go for a car ride at 7 pm in the night"
    }
  ]
  
  // to get all the todos

  app.get('/todos', (req, res)=>{
        console.log("Get all todos hit !!!");
        res.status(200).json(todos);
  })

  // to get a specific todo we want to search for the specific to do.
  // get the id from the url and then search for it in the array.

  app.get('/todos/:id', (req,res ) =>{
    console.log("get selected todo hit !!!");
    
    //extract the id from url 
    const id = parseInt(req.params.id);
    console.log(id);

    // now we will check weather there is any todo for the coressponding id.
    const response = todos.find((i) =>{
        return i.id === id;
    })

     // if exists then send response .
    if(response){
      return res.status(200).json(response);
    }else{
      res.status(401);
    }
  })

  // Create a new Todo 
  app.post('/todos', (req , res)=>{

      const data = req.body;
      let ids = todos.length + 1;
      // console.log(data);
      let re = {};
      re.id = ids;
      re.title = data.title;
      re.description = data.description;
      todos.push(re);
      res.status(201).json(todos);
  })

  app.put('/todos/:id', (req ,res) =>{
    const data = req.body;
    // find the data with the corresponding id
    todos.forEach(element => {
       if(element.id === parseInt(req.params.id)){
        element.title = data.title;
        element.description = data.description;
       }
    });

    return res.status(203).json(todos);
  })

  app.delete('/todos/:id', (req, res) => {
    const todoIndex = todos.findIndex(t => t.id === parseInt(req.params.id));
    if (todoIndex === -1) {
      res.status(404).send();
    } else {
      todos.splice(todoIndex, 1);
      res.status(200).send();
    }
  });

  app.listen(port, ()=>{
    console.log(`Running on the port ${port}`);
  });

  module.exports = app;