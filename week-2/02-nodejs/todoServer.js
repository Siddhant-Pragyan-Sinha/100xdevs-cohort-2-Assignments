/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
const bodyParser = require('body-parser');
const port = 3000;
const app = express();

app.use(bodyParser.json());

// For sorting out the id thing, we can make an array
var todos = [];

// To get all the todos from the server
app.get("/todos", (req, res) => {
  res.status(200).json(todos);
});

// Now want to retrieve a particular Task by [id]
app.get("/todos/:id", (req, res) => {
  const ind = parseInt(req.params.id);

  // Find function to find the specific todo
  const access = todos.find((reqid) => reqid === ind);

  if (!access) {
    // Error Logic
    res.status(404).json({
      message: "Todo doesn't exist!",
    });
  }

  res.status(200).json(access);
});

// To add a new todo
app.post("/todos", (req, res) => {
  const Newdata = {
    id: Math.floor(Math.random() * 1000000),
    title: req.body.title,
    completed: req.body.completed,
    description: req.body.description,
  };

  todos.push(Newdata);
  res.status(201).json({
    msg: "Created with the ID of the created todo item in JSON format",
    Newdata,
  });
});

// To update a Task
app.put("/todos/:id", (req, res) => {
  // Update logic here
  const i = parseInt(req.params.id)

  const toUpdate = todos.findIndex((reqind) => {reqind === i});

  if(toUpdate == -1){
    //Error Logic
      res.status(404).json({
      message: "Todo doesn't exist!",
    });
  }
  else{
    todos[toUpdate].title = req.body.title
    todos[toUpdate].completed = req.body.completed
    todos[toUpdate].description =  req.body.description

    res.status(201).json({
      message: "Todo Updated successfuly!",
    });
  }
 

});

app.delete("/todos/:id", (req, res) => {
  // Delete logic here
    const todoIndex = todos.findIndex(
    (reqTodo) => reqTodo.id === parseInt(req.params.id)
  );
  // If todo doesen't exists.
  if (todoIndex === -1) {
    // Give response with 404 status code stating the error.
    res.status(404).json({
      message: "Todo doesen't exists!",
    });
  } else {
    // If the todo exists, remove it from the array using splice() function and send as response to update.
    todos.splice(todoIndex, 1);
    res.status(200).send();
  }
});

// For any other route not defined in the server return 404
app.use((req, res) => {
  res.status(404).json({
    message: "Not Found",
  });
});

app.listen(port, () => {
  console.log(`Listening on: http://localhost:${port}/`);
});

module.exports = app;
