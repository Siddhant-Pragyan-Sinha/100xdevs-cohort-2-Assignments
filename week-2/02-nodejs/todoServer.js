/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs  = require('fs');
  const app = express();
  


  app.use(bodyParser.json());

  let todo = [];

  const jsonData = JSON.stringify(todo,null,2);
  const filePath = 'todos.json'

  //this method is to read file 
  const readFileSync = (filePath)=>{
  try{
      const data = fs.readFileSync(filePath,'utf-8');
      console.log("lets console",data);
      return JSON.parse(data || '[]');
  }catch (err) {
    console.error('Error reading file:', err);
    return [];
}
  }
 //this method is to write file
  const writeFileSync = (filePath,data)=>{
    fs.writeFileSync(filePath,JSON.stringify(data,null,2),'utf-8');
  }

  app.get('/todo',(req,res)=>{
    const todoList = readFileSync(filePath);
    res.status(200).json(todoList);
  })

  app.get('/todo/:id',(req,res)=>{
    const todoList = readFileSync(filePath);
    const id = req.params.id;
    const todoItem = todoList.find((item)=>item.id === id);
    if(!todoItem){
      res.status(404).json({message:'Todo item not found'});
    }
    else{
      res.status(200).json(todoItem);
    }
  })


  app.post('/todo',(req,res)=>{
    const {title,description} = req.body;
    if( !title || !description){
      return res.status(400).json({error:"Id, title and description is required"})
    }
    const jsonData = readFileSync(filePath);
    const id = jsonData.length.toString();
    const newData = {id,title,description};
  
  
    jsonData.push(newData);
    writeFileSync(filePath,jsonData);
    res.status(201).json({message:"Todo added successfully"});

  })
  

  app.put('/todo/:id',(req,res)=>{
    const {title,description} =req.body;
    const id = req.params.id;
    const jsonData = readFileSync(filePath);
    const todoItem = jsonData.find((item)=>item.id === id);
    if(!todoItem){
      return res.status(404).json({error:"todo status not found"});
    }
    if(!title && !description){
      return res.status(400).json({error:"title and description is required"});
    }
    const index = jsonData.indexOf(todoItem);
    jsonData[index].title = title;
    jsonData[index].description = description;
    writeFileSync(filePath,jsonData);
    res.status(200).json({message:"status change successfully"});
  });

  app.delete('/todo/:id',(req,res)=>{
    const id = req.params.id;
    const jsonData = readFileSync(filePath);
    const todoItem = jsonData.find((item)=>item.id === id);
    if(!todoItem){
      return res.status(404).json({error:"todo status not found"});
    }
    const index = jsonData.indexOf(todoItem);
    jsonData.splice(index,1); //is to remove data from the array
    writeFileSync(filePath,jsonData);
    res.status(200).json({message:"status deleted successfully"});
  });

  module.exports = app;


  app.listen(3000,(portNumber = 3000)=>{
    console.log(`this is the port number ${portNumber}`);
  })
